// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "subsystems/Elevator.h"
#include <frc/smartdashboard/SmartDashboard.h>
#include <iostream>
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

Elevator::Elevator() : m_elevator1{5, rev::CANSparkMax::MotorType::kBrushless} {
    SetName("Elevator");
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SetSubsystem("Elevator");
        
 //AddChild("elevator", &m_elevator);
/*
 AddChild("elevator1", &m_elevator1);
 m_elevator1.SetInverted(false);

 AddChild("elevator2?", &m_elevator2);
 m_elevator2.SetInverted(false);*/
//m_elevator2.Follow(m_elevator1);

 //   frc::SmartDashboard::PutNumber("P Gain", kP);
 //   frc::SmartDashboard::PutNumber("I Gain", kI);
 //  frc::SmartDashboard::PutNumber("D Gain", kD);
  //  frc::SmartDashboard::PutNumber("I Zone", kIz);
   // frc::SmartDashboard::PutNumber("Feed Forward", kFF);
    //frc::SmartDashboard::PutNumber("Max Output", kMaxOutput);
    //frc::SmartDashboard::PutNumber("Min Output", kMinOutput);
    //frc::SmartDashboard::PutNumber("Set Rotations", 0);
    //double p = frc::SmartDashboard::GetNumber("P Gain", 0);
    //double i = frc::SmartDashboard::GetNumber("I Gain", 0);
    //double d = frc::SmartDashboard::GetNumber("D Gain", 0);
    //double iz = frc::SmartDashboard::GetNumber("I Zone", 0);
    //double ff = frc::SmartDashboard::GetNumber("Feed Forward", 0);
   // double max = frc::SmartDashboard::GetNumber("Max Output", 0);
  //  double min = frc::SmartDashboard::GetNumber("Min Output", 0);
  //  double rotations = frc::SmartDashboard::GetNumber("Set Rotations", 0);

    // if PID coefficients on SmartDashboard have changed, write new values to controller



    //if((p != kP)) { PIDcontrol.SetP(p); kP = p; }
    //if((i != kI)) { PIDcontrol.SetI(i); kI = i; }
    //if((d != kD)) { PIDcontrol.SetD(d); kD = d; }
    //if((iz != kIz)) { PIDcontrol.SetIZone(iz); kIz = iz; }
    //if((ff != kFF)) { PIDcontrol.SetFF(ff); kFF = ff; }
    //if((max != kMaxOutput) || (min != kMinOutput)) { 
     // PIDcontrol.SetOutputRange(min, max); 
    //  kMinOutput = min; kMaxOutput = max; 
   // }
   // 

//put in the 
//gingingin wifi password
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Elevator::Periodic() {
    // Put code here to be run every loop
    //important measurements:

    //chain length 1side:
    //radius of the chain gear bracket thingy: ~1.75in
    //goal lengths: to be looked up.

}

void Elevator::SimulationPeriodic() {
    // This method will be called once per scheduler run when in simulation

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

void Elevator::ElevatorPreset(int preset) {
//   double presetInverted = -1*preset+3;
//    double rotationScaleConstant = 125/(16*1.75*2.54*3);
//    desiredPosition = preset*rotationScaleConstant;
//
//        PIDcontrol.SetReference((desiredPosition - currentPosition), rev::ControlType::kPosition);
  //   currentPosition =  neoEncoder.GetPosition()*rotationScaleConstant;
 //    
}

void Elevator::ElevatorManual(double setspeed) {

    m_elevator1.Set(setspeed);


}
// Put methods for controlling this subsystem
// here. Call these from Commands.
